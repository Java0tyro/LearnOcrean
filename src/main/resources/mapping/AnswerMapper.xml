<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="learnOcean.dao.AnswerMapper" >
  <resultMap id="BaseResultMap" type="learnOcean.model.Answer" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user" property="user" jdbcType="BIGINT" />
    <result column="like_num" property="likeNum" jdbcType="INTEGER" />
    <result column="comment_num" property="commentNum" jdbcType="INTEGER" />
    <result column="question" property="question" jdbcType="BIGINT" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="learnOcean.model.Answer" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user, like_num, comment_num, question, time, modified_time
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from answer
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from answer
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="learnOcean.model.Answer" >
    insert into answer (id, user, like_num, 
      comment_num, question, time, 
      modified_time, content)
    values (#{id,jdbcType=BIGINT}, #{user,jdbcType=BIGINT}, #{likeNum,jdbcType=INTEGER}, 
      #{commentNum,jdbcType=INTEGER}, #{question,jdbcType=BIGINT}, #{time,jdbcType=TIMESTAMP}, 
      #{modifiedTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="learnOcean.model.Answer" >
    insert into answer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="user != null" >
        user,
      </if>
      <if test="likeNum != null" >
        like_num,
      </if>
      <if test="commentNum != null" >
        comment_num,
      </if>
      <if test="question != null" >
        question,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="modifiedTime != null" >
        modified_time,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="user != null" >
        #{user,jdbcType=BIGINT},
      </if>
      <if test="likeNum != null" >
        #{likeNum,jdbcType=INTEGER},
      </if>
      <if test="commentNum != null" >
        #{commentNum,jdbcType=INTEGER},
      </if>
      <if test="question != null" >
        #{question,jdbcType=BIGINT},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedTime != null" >
        #{modifiedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="learnOcean.model.Answer" >
    update answer
    <set >
      <if test="user != null" >
        user = #{user,jdbcType=BIGINT},
      </if>
      <if test="likeNum != null" >
        like_num = #{likeNum,jdbcType=INTEGER},
      </if>
      <if test="commentNum != null" >
        comment_num = #{commentNum,jdbcType=INTEGER},
      </if>
      <if test="question != null" >
        question = #{question,jdbcType=BIGINT},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedTime != null" >
        modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="learnOcean.model.Answer" >
    update answer
    set user = #{user,jdbcType=BIGINT},
      like_num = #{likeNum,jdbcType=INTEGER},
      comment_num = #{commentNum,jdbcType=INTEGER},
      question = #{question,jdbcType=BIGINT},
      time = #{time,jdbcType=TIMESTAMP},
      modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="learnOcean.model.Answer" >
    update answer
    set user = #{user,jdbcType=BIGINT},
      like_num = #{likeNum,jdbcType=INTEGER},
      comment_num = #{commentNum,jdbcType=INTEGER},
      question = #{question,jdbcType=BIGINT},
      time = #{time,jdbcType=TIMESTAMP},
      modified_time = #{modifiedTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>